<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design on Blog - Nitish Puri</title><link>https://nitishpuri.github.io/blog-hugo/tags/design/</link><description>Recent content in design on Blog - Nitish Puri</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://nitishpuri.github.io/blog-hugo/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Head First Design Patterns</title><link>https://nitishpuri.github.io/blog-hugo/books/programming/head-first-design-patterns/</link><pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate><guid>https://nitishpuri.github.io/blog-hugo/books/programming/head-first-design-patterns/</guid><description>Strategy Pattern Defines a family of algorithms, encapsulates each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. Observer Pattern Defines one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated. Decorator Pattern Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for existing functionality. Java IO classes Factory Method Pattern Defines an interface for creating an object, but lets subclasses decide which class to instantiate.</description></item></channel></rss>